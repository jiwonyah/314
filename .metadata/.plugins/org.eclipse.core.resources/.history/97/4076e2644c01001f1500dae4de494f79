package com.uow.project.profile;

import java.security.Principal;
import java.util.Optional;

import org.apache.catalina.User;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//import com.uow.project.user.CurrentUser;
import com.uow.project.user.SiteUser;
import com.uow.project.user.UserRepository;
import com.uow.project.user.UserService;

import lombok.RequiredArgsConstructor;

@Controller
@RequiredArgsConstructor
public class ProfileController {

    private final UserRepository userRepository;

 
    private final UserService userService;
    private final AuthenticationManager authenticationManager;

    @GetMapping("/profile/{username}")
    public ResponseEntity<SiteUser> getUserProfile(@PathVariable String username) {
        SiteUser user = userService.getUser(username);
        if (user != null) {
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.notFound().build();
        }
    }
    
//    @GetMapping("/profile/{username}")
//    public String profile(@PathVariable("username") String username, Model model) {
//        SiteUser user = userService.getUser(username);
//        model.addAttribute("user", user);
//        return "profile";
//    }
//
//    @GetMapping("/profile/{username}/edit")
//    public String editProfile(@PathVariable("username") String username, Model model) {
//        SiteUser user = userService.getUser(username);
//        model.addAttribute("user", user);
//        return "profile-edit";
//    }
//
//    @PostMapping("/profile/{username}/edit")
//    public String updateProfile(@PathVariable("username") String username, @ModelAttribute SiteUser user, Principal principal, RedirectAttributes redirectAttributes) {
//        SiteUser currentUser = userService.getUser(username);
//        currentUser.setFirstName(user.getFirstName());
//        currentUser.setLastName(user.getLastName());
//        currentUser.setEmail(user.getEmail());
//        userService.update(currentUser);
//
//        // 사용자 정보 업데이트 후 로그인 세션 갱신
//        Authentication authentication = authenticationManager.authenticate(
//                new UsernamePasswordAuthenticationToken(currentUser.getUsername(), currentUser.getPassword()));
//        SecurityContextHolder.getContext().setAuthentication(authentication);
//
//        redirectAttributes.addFlashAttribute("message", "프로필이 업데이트되었습니다.");
//        return "redirect:/profile/{username}";
//    }
    
//    @GetMapping("/profile/{username}")
//    public String userProfile(@PathVariable String username, @ModelAttribute("user") SiteUser user,Model model) {
//        // Spring Security를 사용하여 현재 사용자의 인증 정보를 가져옵니다.
//        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
//
//        if (authentication == null || authentication.getName().equals("anonymousUser")) {
//            // 사용자가 없으면 예외 처리 또는 적절한 대체 동작을 수행합니다.
//            return "guestAlert";
//        }
//        
//        // 사용자가 로그인되어 있으면 프로필 페이지를 표시합니다.
//        Optional<SiteUser> user = userRepository.findByusername(username);
//
//        // 모델에 사용자 정보를 추가하여 프로필 페이지로 전달합니다.
//        user.ifPresent(u -> model.addAttribute("user", u));
//        return "profile";
//    }
    
//    @GetMapping("/profile/{username}")
//    public String viewProfile(@PathVariable("username") String username, Model model, @AuthenticationPrincipal SiteUser user) {
//    	Optional<SiteUser> optionalUser  = userRepository.findByusername(username);
//        if (optionalUser.isEmpty()) { // (1)
//        	return "guestAlert";
//        }
//        SiteUser byUsername = optionalUser.get();
//        model.addAttribute(byUsername); // (2)
//        model.addAttribute("isOwner", byUsername.equals(user)); // (3)
//        return "profile";
//    }
    
}
